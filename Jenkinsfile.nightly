#!groovy

/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBM Corporation 2018, 2019
 */

def isMasterBranch = env.BRANCH_NAME == 'master'
def slackChannel = '#zowe-build'
def zoweReleaseRepository = 'libs-release-local'
def zoweReleasePath = '/org/zowe/nightly'
def zoweBuildName = 'zowe-install-packaging :: staging'
def zoweBuildRepository = 'libs-snapshot-local'
def zoweCliReleasePath = '/org/zowe/nightly/cli'
def zoweCliBuildName = 'Zowe CLI Bundle :: master'
def zoweCliBuildRepository = 'libs-snapshot-local'

def opts = []
// keep last 20 builds for regular branches, no keep for pull requests
opts.push(buildDiscarder(logRotator(numToKeepStr: '20')))
// disable concurrent build
opts.push(disableConcurrentBuilds())
if (isMasterBranch) {
  // run every night 11pm EST
  opts.push(pipelineTriggers([cron('''TZ=America/New_York
H 23 * * *''')]))
}

// define custom build parameters
def customParameters = []
// >>>>>>>> parameters to control pipeline behavior
// >>>>>>>> parameters of artifactory
customParameters.push(string(
  name: 'ARTIFACTORY_URL',
  description: 'Artifactory URL',
  defaultValue: 'https://gizaartifactory.jfrog.io/gizaartifactory',
  trim: true,
  required: true
))
customParameters.push(credentials(
  name: 'ARTIFACTORY_SECRET',
  description: 'Artifactory access secret',
  credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
  defaultValue: 'GizaArtifactory',
  required: true
))
customParameters.push(booleanParam(
  name: 'TEST_RUN',
  description: 'Test run will skip test cases and will not send out Slack message.',
  defaultValue: isMasterBranch ? false : true
))
opts.push(parameters(customParameters))

// set build properties
properties(opts)

node ('ibm-jenkins-slave-nvm-jnlp') {
  currentBuild.result = 'SUCCESS'

  def sourceRegBuildInfo = null
  def sourceSmpeBuildInfo = null
  def sourceSmpeReadmeInfo = null
  def targetFilePath = "${zoweReleaseRepository}${zoweReleasePath}"
  def targetFullPath = null
  def cliSourceBuildInfo = null
  def cliTargetFilePath = "${zoweReleaseRepository}${zoweCliReleasePath}"
  def cliTargetFullPath = null
  def testRegBuildErrorUrl = ""
  def testSmpeBuildErrorUrl = ""

  try {

    stage('checkout') {
      // checkout source code
      checkout scm
    }

    stage('validate') {
      // prepare JFrog CLI configurations
      withCredentials([usernamePassword(credentialsId: params.ARTIFACTORY_SECRET, passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
        sh "jfrog rt config rt-server-1 --url=${params.ARTIFACTORY_URL} --user=${USERNAME} --password=${PASSWORD}"
      }

      echo "Checking last build of \"${zoweBuildName}\" ..."

      // check artifactory for latest build with SMP/e
      def latestBuild = getArtifactInfoByCLI("${zoweBuildRepository}/*/AZWE*.pax.Z", zoweBuildName)

      // extract build information
      def buildNumber = latestBuild['build.number']
      def buildTimestamp = latestBuild['build.timestamp']
      long buildTimestampInt = buildTimestamp as Long
      def currentTimestamp = sh(script: 'date +"%s"', returnStdout: true).trim()
      long currentTimestampInt = currentTimestamp as Long
      def timeElapse = (currentTimestampInt * 1000 - buildTimestampInt) / (3600 * 1000)
      echo "Build #${buildNumber} is ${timeElapse} hours ago"
      if (timeElapse < 22) { // how many hours we consider it's too old?
        echo "Will skip re-build."
        sourceSmpeBuildInfo = latestBuild
      } else {
        echo "Will need to re-build."
      }

      echo "Checking last CLI build of \"${zoweCliBuildName}\" ..."

      // check artifactory for latest CLI build
      cliSourceBuildInfo = getArtifactInfoByCLI("${zoweCliBuildRepository}/*", zoweCliBuildName)
    }

    stage('build') {
      if (!sourceSmpeBuildInfo || !sourceSmpeBuildInfo['path']) {
        echo "Building new driver ..."

        timeout(time: 1, unit: 'HOURS') {
          // run build
          def build_result = build(
            job: '/zowe-install-packaging/staging',
            parameters: [
              booleanParam(name: 'BUILD_SMPE', value: true),
            ],
            propagate: false
          )
          echo "Build result: ${build_result.result}"
          if (build_result.result != 'SUCCESS') {
            error "Failed to build a new Zowe driver, check failure details at ${build_result.absoluteUrl}"
          }

          // load build info
          sourceSmpeBuildInfo = getArtifactInfoByCLI("${zoweBuildRepository}/*/AZWE*.pax.Z", zoweBuildName)
        }
      }

      // find regular build info
      if (sourceSmpeBuildInfo['build.number']) {
        sourceRegBuildInfo = getArtifactInfoByCLI("${zoweBuildRepository}/*/zowe-*.pax", zoweBuildName, sourceSmpeBuildInfo['build.number'])
        sourceSmpeReadmeInfo = getArtifactInfoByCLI("${zoweBuildRepository}/*/AZWE*.txt", zoweBuildName, sourceSmpeBuildInfo['build.number'])
      }
    }

    stage('test-zowe') {
      // quit pipeline if no build found
      if (!sourceRegBuildInfo || !sourceRegBuildInfo.path) {
        error "Failed to find latest Zowe build"
      }

      timeout(time: 3, unit: 'HOURS') {
        // skip test for testing the pipeline
        if (params.TEST_RUN) {
          echo """Skip testing with parameters:

STARTED_BY_AUTOMATION: true
SKIP_RESET_IMAGE: true
ZOWE_ARTIFACTORY_PATTERN: '${sourceRegBuildInfo.path}'
ZOWE_ARTIFACTORY_BUILD: ''
IS_SMPE_PACKAGE: false
ZOWE_CLI_ARTIFACTORY_PATTERN: '${cliSourceBuildInfo.path}'
ZOWE_CLI_ARTIFACTORY_BUILD: ''
TEST_CASE_DEBUG_INFORMATION: 'test:*'
Skip Stage: Lint: true
Skip Stage: Audit: true
Skip Stage: SonarQube Scan: true
"""
        } else {
          def test_result = build(
              job: '/zowe-install-test/staging',
              parameters: [
                booleanParam(name: 'STARTED_BY_AUTOMATION', value: true),
                booleanParam(name: 'SKIP_RESET_IMAGE', value: true),
                string(name: 'ZOWE_ARTIFACTORY_PATTERN', value: sourceRegBuildInfo.path),
                string(name: 'ZOWE_ARTIFACTORY_BUILD', value: ''),
                booleanParam(name: 'IS_SMPE_PACKAGE', value: false),
                string(name: 'ZOWE_CLI_ARTIFACTORY_PATTERN', value: cliSourceBuildInfo.path),
                string(name: 'ZOWE_CLI_ARTIFACTORY_BUILD', value: ''),
                string(name: 'TEST_CASE_DEBUG_INFORMATION', value: 'test:*'),
                booleanParam(name: 'Skip Stage: Lint', value: true),
                booleanParam(name: 'Skip Stage: Audit', value: true),
                booleanParam(name: 'Skip Stage: SonarQube Scan', value: true)
              ],
              propagate: false
            )
          echo "Test result: ${test_result.result}"
          if (test_result.result != 'SUCCESS') {
            testRegBuildErrorUrl = test_result.absoluteUrl
            echo "Test failed on regular build ${sourceRegBuildInfo.path}, check failure details at ${test_result.absoluteUrl}"
          }
        }
      }
    }

    stage('test-smpe') {
      // quit pipeline if no build found
      if (!sourceSmpeBuildInfo || !sourceSmpeBuildInfo.path) {
        error "Failed to find latest Zowe build"
      }

      timeout(time: 3, unit: 'HOURS') {
        // skip test for testing the pipeline
        if (params.TEST_RUN) {
          echo """Skip testing with parameters:

STARTED_BY_AUTOMATION: true
SKIP_RESET_IMAGE: true
ZOWE_ARTIFACTORY_PATTERN: '${sourceSmpeBuildInfo.path}'
ZOWE_ARTIFACTORY_BUILD: ''
IS_SMPE_PACKAGE: true
ZOWE_CLI_ARTIFACTORY_PATTERN: '${cliSourceBuildInfo.path}'
ZOWE_CLI_ARTIFACTORY_BUILD: ''
TEST_CASE_DEBUG_INFORMATION: 'test:*'
Skip Stage: Lint: true
Skip Stage: Audit: true
Skip Stage: SonarQube Scan: true
"""
        } else {
          def test_result = build(
              job: '/zowe-install-test/staging',
              parameters: [
                booleanParam(name: 'STARTED_BY_AUTOMATION', value: true),
                booleanParam(name: 'SKIP_RESET_IMAGE', value: true),
                string(name: 'ZOWE_ARTIFACTORY_PATTERN', value: sourceSmpeBuildInfo.path),
                string(name: 'ZOWE_ARTIFACTORY_BUILD', value: ''),
                booleanParam(name: 'IS_SMPE_PACKAGE', value: true),
                string(name: 'ZOWE_CLI_ARTIFACTORY_PATTERN', value: cliSourceBuildInfo.path),
                string(name: 'ZOWE_CLI_ARTIFACTORY_BUILD', value: ''),
                string(name: 'TEST_CASE_DEBUG_INFORMATION', value: 'test:*'),
                booleanParam(name: 'Skip Stage: Lint', value: true),
                booleanParam(name: 'Skip Stage: Audit', value: true),
                booleanParam(name: 'Skip Stage: SonarQube Scan', value: true)
              ],
              propagate: false
            )
          echo "Test result: ${test_result.result}"
          if (test_result.result != 'SUCCESS') {
            testSmpeBuildErrorUrl = test_result.absoluteUrl
            echo "Test failed on SMP/e build ${sourceSmpeBuildInfo.path}, check failure details at ${test_result.absoluteUrl}"
          }
        }
      }
    }

    stage('promote') {
      // promote Zowe nightly build
      targetFullPath = promoteArtifact(sourceSmpeBuildInfo, targetFilePath)
      targetFullPath = promoteArtifact(sourceSmpeReadmeInfo, targetFilePath)
      targetFullPath = promoteArtifact(sourceRegBuildInfo, targetFilePath)

      // promote Zowe CLI nightly build
      cliTargetFullPath = promoteArtifact(cliSourceBuildInfo, cliTargetFilePath)
    }

    stage('done') {
      def slackColor = 'good'
      def message = """
Zowe Build ${zoweBuildName}#${sourceRegBuildInfo['build.number']} is promoted as nightly build. You can download from:

${params.ARTIFACTORY_URL}/${targetFullPath}

(SMP/e build is promoted into same folder.)

The CLI Standalone Package ${zoweCliBuildName}#${cliSourceBuildInfo['build.number']} is promoted as nightly build. You can download from:

${params.ARTIFACTORY_URL}/${cliTargetFullPath}
"""
      if (testRegBuildErrorUrl) {
        slackColor = 'warning'
        message = """
${message}
!!WARNING!! Smoke test FAILED on the regular build! Check test result here:

${testRegBuildErrorUrl}
"""
      }

      if (testSmpeBuildErrorUrl) {
        slackColor = 'warning'
        message = """
${message}
!!WARNING!! Smoke test FAILED on the SMP/e build! Check test result here:

${testSmpeBuildErrorUrl}
"""
      }

      echo """
*************************************************************************************************
${message}
*************************************************************************************************
"""

      def slackMessage = "${message}\nCheck pipeline detail: ${env.BUILD_URL}"
      if (params.TEST_RUN) {
        echo "Slack message in ${slackColor}:\n${slackMessage}"
      } else {
        slackSend channel: slackChannel,
                  color: slackColor,
                  message: slackMessage
      }

      emailext body: "Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} succeeded.\n\nCheck detail: ${env.BUILD_URL}" ,
          subject: "[Jenkins] Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} succeeded\n\n${message}",
          recipientProviders: [
            [$class: 'RequesterRecipientProvider'],
            [$class: 'CulpritsRecipientProvider'],
            [$class: 'DevelopersRecipientProvider'],
            [$class: 'UpstreamComitterRecipientProvider']
          ]
    }

  } catch (err) {
    currentBuild.result = 'FAILURE'

    // catch all failures to send out notification
    def slackColor = 'warning'
    def slackMessage = "Promote nightly build failed.\n\nError: ${err}\n\nCheck pipeline detail: ${env.BUILD_URL}"
    if (params.TEST_RUN) {
      echo "Slack message in ${slackColor}:\n${slackMessage}"
    } else {
      slackSend channel: slackChannel,
                color: slackColor,
                message: slackMessage
    }

    emailext body: "Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} failed.\n\nError: ${err}\n\nCheck detail: ${env.BUILD_URL}" ,
        subject: "[Jenkins] Job \"${env.JOB_NAME}\" build #${env.BUILD_NUMBER} failed",
        recipientProviders: [
          [$class: 'RequesterRecipientProvider'],
          [$class: 'CulpritsRecipientProvider'],
          [$class: 'DevelopersRecipientProvider'],
          [$class: 'UpstreamComitterRecipientProvider']
        ]

    throw err
  }
}
